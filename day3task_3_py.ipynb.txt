{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "def display():\n",
        "  print(\"hello python!\")\n",
        "display()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JYtt31BLi294",
        "outputId": "6c48f302-02b6-4851-c573-57f1738fcb01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello python!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def add():\n",
        "  a=int(input(\"enter a\"))\n",
        "  b=int(input(\"enter b\"))\n",
        "  c=a+b\n",
        "  print(c)\n",
        "add()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EzZX86J7j6ZQ",
        "outputId": "ab4142cc-f39a-486d-9963-6ffe34b98700"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter a2\n",
            "enter b3\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#factorial with function\n",
        "def fact():\n",
        "  n=int(input(\"enter a number\"))\n",
        "  fact=1\n",
        "  for i in range (1,n+1):\n",
        "    fact=fact*i\n",
        "  print(fact)\n",
        "fact()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4k373ReRkXkj",
        "outputId": "e40e700d-d402-4d63-9a74-ec1be47120ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter a number3\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def isprime():\n",
        "    n = int(input(\"Enter a number: \"))\n",
        "    if n < 2:\n",
        "        print(\"Not prime\")\n",
        "        return\n",
        "    for i in range(2, n):\n",
        "        if n % i == 0:\n",
        "            print(\"Not prime\")\n",
        "            return\n",
        "    print(\"Prime\")\n",
        "\n",
        "isprime()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QqEQysqFoihG",
        "outputId": "3e67d5aa-54a3-40bd-b637-29236023fe5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 4\n",
            "Not prime\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from typing import List\n",
        "def fibonacci(n):\n",
        "  sequence=[]\n",
        "  a, b = 0,1\n",
        "  for i in range(n):\n",
        "    sequence.append(a)\n",
        "    a , b = b , a+b\n",
        "  return sequence\n",
        "\n",
        "print(fibonacci(10))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6hOslvILoxOf",
        "outputId": "20a649ed-a427-45ef-f824-7f3a20509460"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def show():\n",
        "  a=int(input(\"enter a\"))\n",
        "  b=int(input(\"enter b\"))\n",
        "  c=int(input(\" enter c\"))\n",
        "  if a>b and a>c:\n",
        "    print(\"a is greater\")\n",
        "  elif b>a and b>c:\n",
        "      print(\"b is greater\")\n",
        "  else:\n",
        "    print(\"c is greater\")\n",
        "show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "umTDcFznr4zu",
        "outputId": "09b50deb-0244-4adc-af5f-73cda80c9f85"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter a5\n",
            "enter b8\n",
            " enter c18\n",
            "c is greater\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_palindrome(s):\n",
        "    return s == s[::-1]\n",
        "\n",
        "print(is_palindrome(\"racecar\"))\n",
        "print(is_palindrome(\"hello\"))"
      ],
      "metadata": {
        "id": "4LaZGmnb4sw0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e2f09d26-d586-4379-bf16-41bce4710664"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_armstrong_number(num):\n",
        "    num_str = str(num)\n",
        "    power = len(num_str)\n",
        "    sum_of_digits = sum(int(digit) ** power for digit in num_str)\n",
        "    return sum_of_digits == num\n",
        "\n",
        "print(is_armstrong_number(153))\n",
        "print(is_armstrong_number(123))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7-fpsNrLP-DM",
        "outputId": "77e17837-ac89-4c8c-aefb-fc613c468d32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def power(base, exp):\n",
        "    if exp == 0:\n",
        "        return 1\n",
        "    return base * power(base, exp - 1)\n",
        "\n",
        "print(power(2, 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xN94Gu3IQJzZ",
        "outputId": "d441dd0d-226d-41d7-eb98-b1e619e8e4d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def simple_calculator(a, b, operator):\n",
        "    if operator == \"+\":\n",
        "        return a + b\n",
        "    elif operator == \"-\":\n",
        "        return a - b\n",
        "    elif operator == \"*\":\n",
        "        return a * b\n",
        "    elif operator == \"/\":\n",
        "        if b != 0:\n",
        "            return a / b\n",
        "        else:\n",
        "            return \"Error: Division by zero\"\n",
        "    else:\n",
        "        return \"Invalid operator\"\n",
        "\n",
        "print(simple_calculator(5, 3, \"+\"))\n",
        "print(simple_calculator(5, 0, \"/\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GroW159iQTY4",
        "outputId": "fc73ba05-a78d-4ae1-bd11-4a52a0cf1cb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n",
            "Error: Division by zero\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def is_even_or_odd(num):\n",
        "    return \"Even\" if num % 2 == 0 else \"Odd\"\n",
        "\n",
        "print(is_even_or_odd(4))\n",
        "print(is_even_or_odd(7))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HR78-Pf4QrKa",
        "outputId": "0fd867aa-a4dd-435f-828a-6d1f93b3ad39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Even\n",
            "Odd\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_gcd(a, b):\n",
        "    while b:\n",
        "        a, b = b, a % b\n",
        "    return a\n",
        "\n",
        "a = int(input(\"Enter the first number: \"))\n",
        "b = int(input(\"Enter the second number: \"))\n",
        "\n",
        "print(\"The GCD of\", a, \"and\", b, \"is:\", find_gcd(a, b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CNhmXnxnQvug",
        "outputId": "80eb0d5c-9c6d-40d7-9509-d5f4179defa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the first number: 4\n",
            "Enter the second number: 8\n",
            "The GCD of 4 and 8 is: 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_gcd(a, b):\n",
        "    while b:\n",
        "        a, b = b, a % b\n",
        "    return a\n",
        "\n",
        "def find_lcm(a, b):\n",
        "    return abs(a * b) // find_gcd(a, b)\n",
        "\n",
        "a = int(input(\"Enter the first number: \"))\n",
        "b = int(input(\"Enter the second number: \"))\n",
        "\n",
        "print(\"The LCM of\", a, \"and\", b, \"is:\", find_lcm(a, b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GlRTBO0HRLWs",
        "outputId": "9046ae7c-c4f2-496c-c68f-8bf5c0759a56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the first number: 5\n",
            "Enter the second number: 10\n",
            "The LCM of 5 and 10 is: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def reverse_string(s):\n",
        "    return s[::-1]\n",
        "\n",
        "s = input(\"Enter a string: \")\n",
        "\n",
        "print(\"The reversed string is:\", reverse_string(s))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aIxeZnoNRd8s",
        "outputId": "55d2e7b0-756a-46cb-f707-f8ab28488c74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string: Sush\n",
            "The reversed string is: hsuS\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def count_vowels(s):\n",
        "    vowels = \"aeiouAEIOU\"\n",
        "    return sum(1 for char in s if char in vowels)\n",
        "\n",
        "s = input(\"Enter a string: \")\n",
        "\n",
        "print(\"The number of vowels in the string is:\", count_vowels(s))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WLgofr3HRjvY",
        "outputId": "c43895c6-cc24-49f1-f752-f083c9da6f5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string: Virat Kohli \n",
            "The number of vowels in the string is: 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_of_digits(num):\n",
        "    return sum(int(digit) for digit in str(num))\n",
        "\n",
        "num = int(input(\"Enter a number: \"))\n",
        "\n",
        "print(\"The sum of digits is:\", sum_of_digits(num))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9EiX2ZrxSEzP",
        "outputId": "eca14b23-c567-4f4d-a78d-01b9b7b30429"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 18\n",
            "The sum of digits is: 9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def greet(name, greeting=\"Hello\"):\n",
        "    return f\"{greeting}, {name}!\"\n",
        "\n",
        "name = input(\"Enter your name: \")\n",
        "print(greet(name))\n",
        "print(greet(name, \"Hi\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EhCEsmMtSbIL",
        "outputId": "2ba40cb3-ed04-4d7e-b1e4-44e4af9ea65a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your name: Cheeku\n",
            "Hello, Cheeku!\n",
            "Hi, Cheeku!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_of_numbers(*args):\n",
        "    return sum(args)\n",
        "\n",
        "numbers = input(\"Enter numbers separated by spaces: \").split()\n",
        "numbers = [int(num) for num in numbers]\n",
        "\n",
        "print(\"The sum of the numbers is:\", sum_of_numbers(*numbers))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ft8Ul4gZSkHf",
        "outputId": "fef92fdb-11a3-4274-b437-90c97276e9f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter numbers separated by spaces: 1 8 8 2 7 8\n",
            "The sum of the numbers is: 34\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def print_kwargs(**kwargs):\n",
        "    for key, value in kwargs.items():\n",
        "        print(f\"{key}: {value}\")\n",
        "\n",
        "print_kwargs(name=\"Alice\", age=25, city=\"New York\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gfdU0hCwS-Jc",
        "outputId": "78e7c0e0-8392-415b-b2de-36610aeb4b14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "name: Alice\n",
            "age: 25\n",
            "city: New York\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "num = float(input(\"Enter a number: \"))\n",
        "\n",
        "square_root = math.sqrt(num)\n",
        "factorial = math.factorial(int(num)) if num.is_integer() and num >= 0 else \"Factorial is not defined for non-integer or negative numbers\"\n",
        "sine_value = math.sin(math.radians(num))\n",
        "\n",
        "print(f\"Square root of {num} is: {square_root}\")\n",
        "print(f\"Factorial of {int(num)} is: {factorial}\")\n",
        "print(f\"Sine of {num} (in degrees) is: {sine_value}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rgkSezQiTAD9",
        "outputId": "bbe293e2-32db-4514-df42-d44a2e40dec5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 18\n",
            "Square root of 18.0 is: 4.242640687119285\n",
            "Factorial of 18 is: 6402373705728000\n",
            "Sine of 18.0 (in degrees) is: 0.3090169943749474\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "def generate_random_number(start, end):\n",
        "    return random.randint(start, end)\n",
        "\n",
        "start = int(input(\"Enter the start of the range: \"))\n",
        "end = int(input(\"Enter the end of the range: \"))\n",
        "\n",
        "print(\"Random number between\", start, \"and\", end, \"is:\", generate_random_number(start, end))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u2Inq1kmTTrv",
        "outputId": "e6b2acd7-e13c-4887-de98-57209f40edf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the start of the range: 18\n",
            "Enter the end of the range: 82\n",
            "Random number between 18 and 82 is: 67\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "square = lambda x: x ** 2\n",
        "\n",
        "num = float(input(\"Enter a number: \"))\n",
        "print(\"The square of\", num, \"is:\", square(num))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DVRKlSoLT248",
        "outputId": "682669c5-045c-45c1-d576-bf270cc6409e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: 44\n",
            "The square of 44.0 is: 1936.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tuples_list = [(1, 4), (3, 2), (5, 1), (2, 3)]\n",
        "\n",
        "sorted_list = sorted(tuples_list, key=lambda x: x[1])\n",
        "\n",
        "print(\"Sorted list based on second element:\", sorted_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IQWodGjuUIdj",
        "outputId": "6addd06a-a362-4049-fd3b-c627c0c9f8e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted list based on second element: [(5, 1), (3, 2), (2, 3), (1, 4)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "even_numbers = filter(lambda x: x % 2 == 0, numbers)\n",
        "squared_even_numbers = map(lambda x: x ** 2, even_numbers)\n",
        "result = list(squared_even_numbers)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Y5J7yubURZt",
        "outputId": "0982f490-663e-4cb5-dc9e-58eeb9d27315"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4, 16, 36, 64, 100]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import mymath\n",
        "\n",
        "x = 10\n",
        "y = 5\n",
        "\n",
        "print(f\"{x} + {y} = {mymath.add(x, y)}\")\n",
        "print(f\"{x} - {y} = {mymath.subtract(x, y)}\")\n",
        "print(f\"{x} * {y} = {mymath.multiply(x, y)}\")\n"
      ],
      "metadata": {
        "id": "5Y-V0_40gNyK",
        "outputId": "8b379ac8-bebd-45a5-9cbe-7892a4d08c7e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 593
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 + 5 = 15\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "module 'mymath' has no attribute 'subtract'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-27-8c38b656f96e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{x} + {y} = {mymath.add(x, y)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{x} - {y} = {mymath.subtract(x, y)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{x} * {y} = {mymath.multiply(x, y)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: module 'mymath' has no attribute 'subtract'"
          ]
        }
      ]
    }
  ]
}